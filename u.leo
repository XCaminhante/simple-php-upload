<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="caminhante.20210224221021.2"><vh>Simple PHP upload</vh></v>
<v t="caminhante.20210224221048.1"><vh>@path .</vh>
<v t="caminhante.20210224221051.12"><vh>.gitattributes</vh></v>
<v t="caminhante.20210224221051.11"><vh>.gitignore</vh></v>
<v t="caminhante.20210224221051.10"><vh>.gitmodules</vh></v>
<v t="caminhante.20210224221051.9"><vh>/.git/</vh></v>
<v t="caminhante.20210224221051.8"><vh>/php-o/</vh></v>
<v t="caminhante.20210224221051.7"><vh>/uploads/</vh></v>
<v t="caminhante.20210224221051.3"><vh>@clean index.php</vh>
<v t="caminhante.20210224221501.1"><vh>includes</vh></v>
<v t="caminhante.20210224221513.1"><vh>function html ()</vh></v>
<v t="caminhante.20210224221523.1"><vh>function plain_text ()</vh></v>
<v t="caminhante.20210224221717.1"><vh>class File</vh>
<v t="caminhante.20210224221830.1"><vh>function __construct ($filename)</vh></v>
<v t="caminhante.20210224222001.1"><vh>static function get_straight_path ($path)</vh></v>
<v t="caminhante.20210224221847.1"><vh>static function current_dir ()</vh></v>
<v t="caminhante.20210224224153.1"><vh>Informations</vh>
<v t="caminhante.20210224221939.1"><vh>static function separator ()</vh></v>
<v t="caminhante.20210224222038.1"><vh>public function is_directory ()</vh></v>
<v t="caminhante.20210224222106.1"><vh>public function is_file ()</vh></v>
<v t="caminhante.20210224222150.1"><vh>public function parent ()</vh></v>
<v t="caminhante.20210224222201.1"><vh>public function path ()</vh></v>
<v t="caminhante.20210224222209.1"><vh>public function name ()</vh></v>
<v t="caminhante.20210224222217.1"><vh>public function relative_name ()</vh></v>
<v t="caminhante.20210224222229.1"><vh>public function extension ()</vh></v>
<v t="caminhante.20210224222238.1"><vh>public function length ()</vh></v>
<v t="caminhante.20210224222250.1"><vh>public function exists ()</vh></v>
<v t="caminhante.20210224222258.1"><vh>public function is_open ()</vh></v>
<v t="caminhante.20210224222310.1"><vh>public function is_uploaded ()</vh></v>
<v t="caminhante.20210224222319.1"><vh>public function can_read ()</vh></v>
<v t="caminhante.20210224222330.1"><vh>public function can_write ()</vh></v>
<v t="caminhante.20210224223819.1"><vh>public function creation_time ()</vh></v>
<v t="caminhante.20210224223827.1"><vh>public function last_modified ()</vh></v>
<v t="caminhante.20210224223833.1"><vh>public function last_accessed ()</vh></v>
<v t="caminhante.20210224223841.1"><vh>public function position ()</vh></v>
<v t="caminhante.20210224223849.1"><vh>public function mode ()</vh></v>
</v>
<v t="caminhante.20210224224415.1"><vh>Manipulations</vh>
<v t="caminhante.20210224223856.1"><vh>public function open ($mode)</vh></v>
<v t="caminhante.20210224223904.1"><vh>public function open_rw ()</vh></v>
<v t="caminhante.20210224223919.1"><vh>public function close ()</vh></v>
<v t="caminhante.20210224223929.1"><vh>public function remove ()</vh></v>
<v t="caminhante.20210224223937.1"><vh>public function copy_to ($target)</vh></v>
<v t="caminhante.20210224223944.1"><vh>public function rename_to ($target)</vh></v>
<v t="caminhante.20210224223951.1"><vh>public function seek ($pos = 0, $whence = SEEK_CUR)</vh></v>
<v t="caminhante.20210224224000.1"><vh>public function rewind ()</vh></v>
<v t="caminhante.20210224224005.1"><vh>public function read ($bytes = 1)</vh></v>
<v t="caminhante.20210224224017.1"><vh>public function readln ()</vh></v>
<v t="caminhante.20210224224024.1"><vh>public function read_all ()</vh></v>
<v t="caminhante.20210224224041.1"><vh>public function write ($str)</vh></v>
<v t="caminhante.20210224224047.1"><vh>public function write_all ($lines)</vh></v>
<v t="caminhante.20210224224052.1"><vh>public function flush ()</vh></v>
<v t="caminhante.20210224224102.1"><vh>public function list ($pattern = '*')</vh></v>
<v t="caminhante.20210224224109.1"><vh>public function mkdir ($name = false)</vh></v>
<v t="caminhante.20210224224118.1"><vh>public function mkfile ($name)</vh></v>
</v>
<v t="caminhante.20210224224450.1"><vh>Locks</vh>
<v t="caminhante.20210224224124.1"><vh>public function lock_exclusive ()</vh></v>
<v t="caminhante.20210224224133.1"><vh>public function lock_shared ()</vh></v>
<v t="caminhante.20210224224140.1"><vh>public function unlock ()</vh></v>
</v>
</v>
<v t="caminhante.20210224221744.1"><vh>class Template</vh>
<v t="caminhante.20210224223435.1"><vh>function __construct ($template)</vh></v>
<v t="caminhante.20210224223443.1"><vh>public function with ($key, $value)</vh></v>
<v t="caminhante.20210224223449.1"><vh>public function read ()</vh></v>
</v>
<v t="caminhante.20210224222405.1"><vh>class FileTemplate</vh>
<v t="caminhante.20210224223500.1"><vh>function __construct ($filename)</vh></v>
<v t="caminhante.20210224223510.1"><vh>public function with ($key, $value)</vh></v>
<v t="caminhante.20210224223520.1"><vh>public function read ()</vh></v>
</v>
<v t="caminhante.20210224222522.1"><vh>class StuffedStringArray</vh>
<v t="caminhante.20210224223319.1"><vh>function __construct (&amp;$array)</vh></v>
<v t="caminhante.20210224223340.1"><vh>public function prologue ($str)</vh></v>
<v t="caminhante.20210224223350.1"><vh>public function epilogue ($str)</vh></v>
<v t="caminhante.20210224223358.1"><vh>public function before ($str)</vh></v>
<v t="caminhante.20210224223403.1"><vh>public function after ($str)</vh></v>
<v t="caminhante.20210224223410.1"><vh>public function read ()</vh></v>
</v>
<v t="caminhante.20210224222606.1"><vh>class UploadedFile</vh>
<v t="caminhante.20210224222938.1"><vh>function __construct (&amp;$url,&amp;$file)</vh></v>
<v t="caminhante.20210224222956.1"><vh>static function format_bytes (int $size)</vh></v>
<v t="caminhante.20210224223057.1"><vh>public function url ()</vh></v>
<v t="caminhante.20210224223105.1"><vh>public function size ()</vh></v>
<v t="caminhante.20210224223111.1"><vh>public function creation ()</vh></v>
<v t="caminhante.20210224223123.1"><vh>public function name ()</vh></v>
<v t="caminhante.20210224223132.1"><vh>public function html_link ()</vh></v>
<v t="caminhante.20210224223140.1"><vh>public function html_button ($action,$description)</vh></v>
<v t="caminhante.20210224223150.1"><vh>public function read ()</vh></v>
</v>
<v t="caminhante.20210224222609.1"><vh>class UploadedFilesList</vh>
<v t="caminhante.20210224222852.1"><vh>function __construct (&amp;$url, &amp;$files_array)</vh></v>
<v t="caminhante.20210224222908.1"><vh>public function read ()</vh></v>
</v>
<v t="caminhante.20210224222612.1"><vh>class RandomName</vh>
<v t="caminhante.20210224222807.1"><vh>function __construct ($alphabet, $namesize)</vh></v>
<v t="caminhante.20210224222813.1"><vh>public function name ()</vh></v>
</v>
<v t="caminhante.20210224222617.1"><vh>function diverse_array ($vector)</vh></v>
<v t="caminhante.20210224222623.1"><vh>function file_upload_error ($err)</vh></v>
<v t="caminhante.20210224222629.1"><vh>function new_random_filename ($extension)</vh></v>
<v t="caminhante.20210224222632.1"><vh>function redirect_after ($seconds,$url)</vh></v>
<v t="caminhante.20210224222634.1"><vh>function upload_file ($file_data)</vh></v>
<v t="caminhante.20210224222638.1"><vh>function delete_file ($filename)</vh></v>
<v t="caminhante.20210224223643.1"><vh>main code</vh>
<v t="caminhante.20210224223659.1"><vh>delete file case</vh></v>
<v t="caminhante.20210224223708.1"><vh>upload case</vh></v>
<v t="caminhante.20210224223716.1"><vh>default case</vh></v>
</v>
</v>
<v t="caminhante.20210224221051.1"><vh>@clean upload.html</vh></v>
<v t="caminhante.20210224221051.4"><vh>@edit config.php</vh></v>
<v t="caminhante.20210224221051.6"><vh>@edit LICENSE</vh></v>
<v t="caminhante.20210224221051.5"><vh>@edit README.md</vh></v>
<v t="caminhante.20210224221051.2"><vh>u.leo</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="caminhante.20210224221021.2"></t>
<t tx="caminhante.20210224221048.1">@tabwidth -2</t>
<t tx="caminhante.20210224221051.1">@language html
&lt;!DOCTYPE html&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="{LANG}" lang="{LANG}" dir="{LANG_DIR}"&gt;
&lt;head&gt;
&lt;meta charset="utf-8"/&gt;
&lt;meta name="robots" content="noindex" /&gt;
&lt;meta name="referrer" content="origin-when-crossorigin" /&gt;
&lt;title&gt;{TITLE}&lt;/title&gt;
&lt;style media="screen"&gt;
body {
  background: #111;
  margin: 0;
  color: #ddd;
  font-family: sans-serif;
}
body &gt; h1 {
  display: block;
  background: rgba(255, 255, 255, 0.05);
  padding: 8px 16px;
  text-align: center;
  margin: 0;
}
body &gt; form {
  display: block;
  background: rgba(255, 255, 255, 0.075);
  padding: 16px 16px;
  margin: 0;
  text-align: center;
}
body &gt; ul {
  display: block;
  padding: 0;
  max-width: 1000px;
  margin: 32px auto;
}
body &gt; ul &gt; li {
  display: block;
  margin: 0;
  padding: 0;
}
body &gt; ul &gt; li &gt; a.uploaded_file {
  display: block;
  margin: 0 0 1px 0;
  list-style: none;
  background: rgba(255, 255, 255, 0.1);
  padding: 8px 16px;
  text-decoration: none;
  color: inherit;
  opacity: 0.5;
}
body &gt; ul &gt; li &gt; a:hover {
  opacity: 1;
}
body &gt; ul &gt; li &gt; a:active {
  opacity: 0.5;
}
body &gt; ul &gt; li &gt; a &gt; span {
  float: right;
  font-size: 90%;
}
body &gt; ul &gt; li &gt; form {
  display: inline-block;
  padding: 0;
  margin: 0;
}
body &gt; ul &gt; li.owned {
  margin: 8px;
}
body &gt; ul &gt; li &gt; form &gt; button {
  opacity: 0.5;
  display: inline-block;
  padding: 4px 16px;
  margin: 0;
  border: 0;
  background: rgba(255, 255, 255, 0.1);
  color: inherit;
}
body &gt; ul &gt; li &gt; form &gt; button:hover {
  opacity: 1;
}
body &gt; ul &gt; li &gt; form &gt; button:active {
  opacity: 0.5;
}
body &gt; ul &gt; li.uploading {
  animation: upanim 2s linear 0s infinite alternate;
}
@keyframes upanim {
  from { opacity: 0.3; }
  to { opacity: 0.8; }
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;{TITLE}&lt;/h1&gt;
&lt;form action="{URL}" method="post" enctype="multipart/form-data" class="dropzone" id="simpleupload-form"&gt;
  &lt;p&gt; &lt;a href="{URL}" style="color:white;"&gt;{URL}&lt;/a&gt; file upload service. Works better with JS switched on.&lt;br/&gt;
  &lt;b&gt;Terms of use: Don't send anything that you wouldn't like people know you have on your computer.&lt;/b&gt; &lt;/p&gt;
  &lt;p&gt; Choose a file or Drag&amp;amp;Drop. Maximum upload total size is {MAX_UPLOAD}, maximum number of simultaneous files is {MAX_FILES}. &lt;/p&gt;
  &lt;input type="file" name="file[]" multiple="multiple" id="simpleupload-input"/&gt;
  &lt;button type="submit"&gt;Submit&lt;/button&gt;
&lt;/form&gt;
&lt;ul id="simpleupload-ul"&gt;{FILES_LIST}&lt;/ul&gt;
&lt;script&gt;
function e(id) { return document.getElementById(id) }

var target_form        = e('simpleupload-form')
var target_ul          = e('simpleupload-ul')
var target_input       = e('simpleupload-input')
var settings_listfiles = true

function init () {
  target_form.addEventListener('dragover', function (event) {
    event.preventDefault()
  }, false)

  target_form.addEventListener('drop', handleFiles, false)

  target_input.onchange = function () {
    addFileLi('Uploading...', '')
    target_form.submit()
  }
}

function addFileLi (name, info) {
  if (settings_listfiles == false) { return }

  target_form.style.display = 'none'

  var new_li = document.createElement('li')
  new_li.className = 'uploading'

  var new_a = document.createElement('a')
  new_a.innerHTML = name
  new_li.appendChild(new_a)

  var new_span = document.createElement('span')
  new_span.innerHTML = info
  new_a.appendChild(new_span)

  target_ul.insertBefore(new_li, target_ul.firstChild)
}

// Handles given event for file upload
function handleFiles (event) {
  event.preventDefault()

  var files = event.dataTransfer.files

  var form = new FormData()

  for (var i = 0; i &lt; files.length; i++) {
    form.append('file[]', files[i])
    addFileLi('Uploading '+files[i].name+' ...', i) }

  var xhr = new XMLHttpRequest()
  xhr.onload = function() { window.location.assign('{URL}') }

  xhr.open('post', '{URL}', true)
  xhr.send(form)
}

init()
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="caminhante.20210224221051.10"></t>
<t tx="caminhante.20210224221051.11"></t>
<t tx="caminhante.20210224221051.12"></t>
<t tx="caminhante.20210224221051.2"></t>
<t tx="caminhante.20210224221051.3">@nocolor
&lt;?php
/*
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/
@others</t>
<t tx="caminhante.20210224221051.7">@path uploads</t>
<t tx="caminhante.20210224221051.8">@path php-o</t>
<t tx="caminhante.20210224221051.9">@path .git</t>
<t tx="caminhante.20210224221501.1">namespace O; include "php-o/O.php";
include "config.php";</t>
<t tx="caminhante.20210224221513.1">function html () {
  header('Content-type: text/html; charset=UTF-8');
}
</t>
<t tx="caminhante.20210224221523.1">function plain_text () {
  header('Content-type: text/plain; charset=UTF-8');
}</t>
<t tx="caminhante.20210224221717.1">class File {
  private const link = 0120000;
  private const file = 0100000;
  private const block = 0060000;
  private const directory = 0040000;
  private const fifo = 0010000;
  private $filename = '';
  private $pathinfo = '';
  private $filehandle = false;
  private $openmode = '';
  @others
}</t>
<t tx="caminhante.20210224221744.1">class Template {
  private $template;
  private $keys;
  @others
}</t>
<t tx="caminhante.20210224221830.1">function __construct ($filename) {
  $this-&gt;filename = s($filename);
  $this-&gt;pathinfo = pathinfo($filename);
}</t>
<t tx="caminhante.20210224221847.1">// Directory of the current script
static function current_dir () {
  return dirname(__FILE__);
}</t>
<t tx="caminhante.20210224221939.1">static function separator () {
  return DIRECTORY_SEPARATOR;
}</t>
<t tx="caminhante.20210224222001.1">static function get_straight_path ($path) {
  $path = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, $path);
  $parts = array_filter(explode(DIRECTORY_SEPARATOR, $path), 'strlen');
  $absolutes = array();
  foreach ($parts as $part) {
    if ('.' == $part) continue;
    if ('..' == $part) {
      array_pop($absolutes);
    } else {
      $absolutes[] = $part; }}
  return implode(DIRECTORY_SEPARATOR, $absolutes);
}</t>
<t tx="caminhante.20210224222038.1">public function is_directory () {
  return is_dir($this-&gt;filename);
}</t>
<t tx="caminhante.20210224222106.1">public function is_file () {
  return is_file($this-&gt;filename);
}</t>
<t tx="caminhante.20210224222150.1">// The directory containing this file/directory
public function parent () {
  return $this-&gt;pathinfo['dirname'];
}</t>
<t tx="caminhante.20210224222201.1">// Canonical path to file/directory
public function path () {
  if ($this-&gt;exists()) { return realpath($this-&gt;filename); }
  return realpath($this-&gt;parent()) . File::separator() . $this-&gt;name();
}</t>
<t tx="caminhante.20210224222209.1">public function name () {
  return $this-&gt;pathinfo['basename'];
}</t>
<t tx="caminhante.20210224222217.1">public function relative_name () {
  return $this-&gt;filename;
}</t>
<t tx="caminhante.20210224222229.1">public function extension () {
  return $this-&gt;pathinfo['extension'];
}</t>
<t tx="caminhante.20210224222238.1">// Length of bytes on file or number of entries on a directory
public function length () {
  if ($this-&gt;is_directory()) {
    return a(scandir($this-&gt;filename,SCANDIR_SORT_NONE))-&gt;count() - 2; }
  if ($this-&gt;is_file()) {
    return filesize($this-&gt;filename); }
  return -1;
}</t>
<t tx="caminhante.20210224222250.1">public function exists () {
  return file_exists($this-&gt;filename);
}</t>
<t tx="caminhante.20210224222258.1">public function is_open () {
  return $filehandle != false;
}</t>
<t tx="caminhante.20210224222310.1">public function is_uploaded () {
  return is_uploaded_file($this-&gt;filename);
}</t>
<t tx="caminhante.20210224222319.1">public function can_read () {
  return is_readable($this-&gt;filename);
}</t>
<t tx="caminhante.20210224222330.1">public function can_write () {
  return is_writable($this-&gt;filename);
}</t>
<t tx="caminhante.20210224222405.1">class FileTemplate {
  private $file;
  private $keys;
  @others
}</t>
<t tx="caminhante.20210224222522.1">class StuffedStringArray {
  private $array = null;
  private $prologue = '';
  private $epilogue = '';
  private $before = '';
  private $after = '';
  @others
}</t>
<t tx="caminhante.20210224222606.1">class UploadedFile {
  private $url;
  private $file;
  @others
}</t>
<t tx="caminhante.20210224222609.1">class UploadedFilesList {
  private $files;
  private $url;
  @others
}</t>
<t tx="caminhante.20210224222612.1">class RandomName {
  private $name = '';
  @others
}</t>
<t tx="caminhante.20210224222617.1">// Rotate a two-dimensional array. Used for file uploads
function diverse_array ($vector) {
  $result = [];
  foreach ($vector as $key1 =&gt; $value1) {
    foreach ($value1 as $key2 =&gt; $value2) {
      $result[$key2][$key1] = $value2; }}
  return $result;
}</t>
<t tx="caminhante.20210224222623.1">function file_upload_error ($err) {
  switch ($err) {
  case UPLOAD_ERR_NO_FILE:
    echo('No file sent.' . "\n");
  case UPLOAD_ERR_INI_SIZE:
  case UPLOAD_ERR_FORM_SIZE:
    echo('Exceeded filesize limit.' . "\n");
  default:
    echo('Unknown error.' . "\n");
  }
}</t>
<t tx="caminhante.20210224222629.1">function new_random_filename ($extension) {
  a:
  global $settings;
  $newname = new RandomName($settings['random_name_alphabet'], $settings['random_name_len']);
  $ext = s(s(s($extension)
    -&gt;trim())
    -&gt;substr(0,$settings['random_name_len']-1))
    -&gt;preg_replace('/[^a-zA-Z0-9_-]/u','');
  if ($ext == '') { $ext = 'txt'; }
  $nfilename = 'uploads/' . $newname-&gt;name() . '.' . $ext;
  if (file_exists($nfilename)) { goto a; }
  return $nfilename;
}</t>
<t tx="caminhante.20210224222632.1">function redirect_after ($seconds,$url) {
  $t = new Template('Refresh: {SECS};url={URL}');
  $t-&gt;with('{SECS}',$seconds);
  $t-&gt;with('{URL}',$url);
  header($t-&gt;read());
}</t>
<t tx="caminhante.20210224222634.1">function upload_file ($file_data) {
  global $settings;
  redirect_after(10,$settings['url']);
  if ($file_data['error'] != UPLOAD_ERR_OK) { file_upload_error($file_data['error']); return; }
  $file = new File($file_data['tmp_name']);
  $orig = new File($file_data['name']);
  $nfilename = new_random_filename($orig-&gt;extension());
  if ($file-&gt;rename_to($nfilename)) {
    echo($settings['url'] . $nfilename . "\n");
  } else {
    echo('Something gone wrong'); }
}</t>
<t tx="caminhante.20210224222638.1">function delete_file ($filename) {
  global $settings;
  redirect_after(2,$settings['url']);
  $file = new File('uploads/' . $filename);
  if ($file-&gt;exists() &amp;&amp; s($file-&gt;path())-&gt;pos(File::current_dir().'/uploads/') == 0) {
    if ($file-&gt;remove()) {
      echo('deleted: '.$file-&gt;name());
    } else {
      echo('Something gone wrong'); }
  } else {
    echo('Something gone wrong'); }
}</t>
<t tx="caminhante.20210224222807.1">function __construct ($alphabet, $namesize) {
  $name = '';
  while (strlen($name) &lt; $namesize) {
    $name .= $alphabet[mt_rand(0, strlen($alphabet)-1)]; }
  $this-&gt;name = s($name);
}</t>
<t tx="caminhante.20210224222813.1">public function name () {
  return $this-&gt;name;
}</t>
<t tx="caminhante.20210224222852.1">function __construct (&amp;$url, &amp;$files_array) {
  $this-&gt;url = $url;
  $this-&gt;files = $files_array;
}</t>
<t tx="caminhante.20210224222908.1">public function read () {
  $url = $this-&gt;url;
  $fileitems = a($this-&gt;files) -&gt;map(function ($f) {
      $a = new UploadedFile($url, $f);
      return $a-&gt;read(); });
  $items = new StuffedStringArray($fileitems);
  $items-&gt;before('&lt;li class="owned"&gt;'."\n");
  $items-&gt;after('&lt;/li&gt;'."\n");
  return $items-&gt;read();
}</t>
<t tx="caminhante.20210224222938.1">function __construct (&amp;$url,&amp;$file) {
  $this-&gt;url = $url;
  $this-&gt;file = $file;
}</t>
<t tx="caminhante.20210224222956.1">static function format_bytes (int $size) {
  $base = log($size, 1024);
  $suffixes = array('B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB');  
  return round(pow(1024, $base-floor($base)), 2).' '.$suffixes[floor($base)];
}</t>
<t tx="caminhante.20210224223057.1">public function url () {
  return $this-&gt;url . $this-&gt;file-&gt;relative_name();
}</t>
<t tx="caminhante.20210224223105.1">public function size () {
  return UploadedFile::format_bytes($this-&gt;file-&gt;length());
}</t>
<t tx="caminhante.20210224223111.1">public function creation () {
  global $settings;
  return date($settings['date_format'], $this-&gt;file-&gt;creation_time());
}</t>
<t tx="caminhante.20210224223123.1">public function name () {
  return $this-&gt;file-&gt;name();
}</t>
<t tx="caminhante.20210224223132.1">public function html_link () {
  $link = new Template(
    '&lt;a class="uploaded_file" href="{FILE_URL}" target="_blank"&gt;'."\n".
      '{FILE_NAME}&lt;span&gt;({FILE_SIZE}, {FILE_CREATION})&lt;/span&gt;'."\n".
    '&lt;/a&gt;'."\n");
  $link-&gt;with('{FILE_URL}',$this-&gt;url());
  $link-&gt;with('{FILE_NAME}',$this-&gt;name());
  $link-&gt;with('{FILE_SIZE}', $this-&gt;size());
  $link-&gt;with('{FILE_CREATION}', $this-&gt;creation());
  return $link-&gt;read();
}</t>
<t tx="caminhante.20210224223140.1">public function html_button ($action,$description) {
  $button = new Template(
    '&lt;form action="{SERVER_URL}" method="post"&gt;'."\n".
      '&lt;input type="hidden" name="target" value="{FILE_NAME}"/&gt;'."\n".
      '&lt;input type="hidden" name="action" value="{BUTTON_ACTION}"/&gt;'."\n".
      '&lt;button type="submit"&gt;{BUTTON_DESC}&lt;/button&gt;'."\n".
    '&lt;/form&gt;'."\n");
  $button-&gt;with('{SERVER_URL}',$this-&gt;url);
  $button-&gt;with('{FILE_NAME}',$this-&gt;name());
  $button-&gt;with('{BUTTON_ACTION}',$action);
  $button-&gt;with('{BUTTON_DESC}',$description);
  return $button-&gt;read();
}</t>
<t tx="caminhante.20210224223150.1">public function read () {
  return $this-&gt;html_link() . $this-&gt;html_button('delete','delete');
}</t>
<t tx="caminhante.20210224223319.1">function __construct (&amp;$array) {
  $this-&gt;array = a($array);
}</t>
<t tx="caminhante.20210224223340.1">public function prologue ($str) {
  $this-&gt;prologue = $str;
}</t>
<t tx="caminhante.20210224223350.1">public function epilogue ($str) {
  $this-&gt;epilogue = $str;
}</t>
<t tx="caminhante.20210224223358.1">public function before ($str) {
  $this-&gt;before = $str;
}</t>
<t tx="caminhante.20210224223403.1">public function after ($str) {
  $this-&gt;after = $str;
}</t>
<t tx="caminhante.20210224223410.1">public function read () {
  $r = s($this-&gt;prologue);
  foreach($this-&gt;array as $value) { $r .= $this-&gt;before . $value . $this-&gt;after; }
  $r .= $this-&gt;epilogue;
  return $r;
}</t>
<t tx="caminhante.20210224223435.1">function __construct ($template) {
  $this-&gt;template = s($template);
  $this-&gt;keys = [];
}</t>
<t tx="caminhante.20210224223443.1">public function with ($key, $value) {
  $this-&gt;keys[$key] = $value;
}</t>
<t tx="caminhante.20210224223449.1">public function read () {
  $r = $this-&gt;template;
  foreach ($this-&gt;keys as $key =&gt; $value) { $r = s($r-&gt;replace($key,$value)); }
  return $r;
}</t>
<t tx="caminhante.20210224223500.1">function __construct ($filename) {
  $this-&gt;file = new File($filename);
  $this-&gt;keys = [];
}</t>
<t tx="caminhante.20210224223510.1">public function with ($key, $value) {
  $this-&gt;keys[$key] = $value;
}</t>
<t tx="caminhante.20210224223520.1">public function read () {
  $this-&gt;file-&gt;open("rb");
  $r = s($this-&gt;file-&gt;read_all());
  $this-&gt;file-&gt;close();
  foreach ($this-&gt;keys as $key =&gt; $value) { $r = s($r-&gt;replace($key,$value)); }
  return $r;
}</t>
<t tx="caminhante.20210224223643.1"></t>
<t tx="caminhante.20210224223659.1">if (isset($_POST) &amp;&amp; isset($_POST['target']) &amp;&amp; isset($_POST['action'])) {
  plain_text();
  switch ($_POST['action']) {
  case 'delete':
    delete_file($_POST['target']);
    break;
  default:
    echo 'Error'; }
  exit;
}</t>
<t tx="caminhante.20210224223708.1">if (isset($_FILES['file'])) {
  plain_text();
  if (is_array($_FILES['file'])) {
    $file_array = diverse_array($_FILES['file']);
    foreach ($file_array as $file_data) { upload_file($file_data); }
  } else {
    upload_file($_FILES['file']); }
  exit;
}</t>
<t tx="caminhante.20210224223716.1">html();
$template = new FileTemplate('upload.html');
$template-&gt;with('{LANG}',$settings['lang']);
$template-&gt;with('{LANG_DIR}',$settings['lang_dir']);
$template-&gt;with('{TITLE}',$settings['title']);
$template-&gt;with('{URL}',$settings['url']);
$template-&gt;with('{MAX_UPLOAD}',ini_get('upload_max_filesize'));
$template-&gt;with('{MAX_FILES}',ini_get('max_file_uploads'));
$uploads = new File('uploads');
$uploaded_files = a($uploads-&gt;list()) -&gt;map(function ($i) { return new File($i); });
$ufiles_list = new UploadedFilesList($url, $uploaded_files);
$template-&gt;with('{FILES_LIST}', $ufiles_list-&gt;read());
echo($template-&gt;read());</t>
<t tx="caminhante.20210224223819.1">public function creation_time () {
  return filectime($this-&gt;filename);
}</t>
<t tx="caminhante.20210224223827.1">public function last_modified () {
  return filemtime($this-&gt;filename);
}</t>
<t tx="caminhante.20210224223833.1">public function last_accessed () {
  return fileatime($this-&gt;filename);
}</t>
<t tx="caminhante.20210224223841.1">// The file pointer position
public function position () {
  if (!$this-&gt;filehandle) { return -1; }
  return ftell($this-&gt;filehandle);
}</t>
<t tx="caminhante.20210224223849.1">// A string describing the mode used to open the file
public function mode () {
  return $this-&gt;openmode;
}</t>
<t tx="caminhante.20210224223856.1">public function open ($mode) {
  if ($this-&gt;filehandle) { return false; }
  if ($this-&gt;is_directory()) {
    $this-&gt;openmode = s("d");
    $this-&gt;filehandle = opendir($this-&gt;filename);
  } else {
    $this-&gt;openmode = s($mode);
    $this-&gt;filehandle = fopen($this-&gt;filename,$mode); }
  if (!$this-&gt;filehandle) { $this-&gt;openmode = ''; }
  return ($this-&gt;filehandle != false);
}</t>
<t tx="caminhante.20210224223904.1">public function open_rw () {
  return $this-&gt;open("c+b");
}</t>
<t tx="caminhante.20210224223919.1">public function close () {
  if (!$this-&gt;filehandle) { return false; }
  if ($this-&gt;is_directory()) {
    closedir($this-&gt;filehandle);
    $r = true; }
  if ($this-&gt;is_file()) {
    $r = fclose($this-&gt;filehandle); }
  $this-&gt;filehandle = false;
  $this-&gt;openmode = '';
  return $r;
}</t>
<t tx="caminhante.20210224223929.1">public function remove () {
  if ($this-&gt;filehandle) { $this-&gt;close(); }
  if ($this-&gt;is_file()) { return unlink($this-&gt;filename); }
  if ($this-&gt;is_directory()) { return rmdir($this-&gt;filename); }
  return false;
}</t>
<t tx="caminhante.20210224223937.1">public function copy_to ($target) {
  $this-&gt;flush();
  return copy($this-&gt;filename,$target);
}</t>
<t tx="caminhante.20210224223944.1">public function rename_to ($target) {
  if ($this-&gt;filehandle) { $this-&gt;close(); }
  $r = rename($this-&gt;filename,$target);
  if ($r) {
    $this-&gt;filename = s($target);
    $this-&gt;pathinfo = pathinfo($target); }
  return $r;
}</t>
<t tx="caminhante.20210224223951.1">public function seek ($pos = 0, $whence = SEEK_CUR) {
  if (!$this-&gt;filehandle) { return false; }
  if ($this-&gt;is_file()) { return fseek($this-&gt;filehandle, $pos, $whence); }
  return false;
}</t>
<t tx="caminhante.20210224224000.1">public function rewind () {
  if (!$this-&gt;filehandle) { return false; }
  if ($this-&gt;is_file()) { return rewind($this-&gt;filehandle); }
  if ($this-&gt;is_directory()) { rewinddir($this-&gt;filehandle); return true; }
  return false;
}</t>
<t tx="caminhante.20210224224005.1">public function read ($bytes = 1) {
  if (!$this-&gt;filehandle) { return false; }
  if ($this-&gt;is_file()) { return fread($this-&gt;filehandle, $bytes); }
  if ($this-&gt;is_directory()) { return readdir($this-&gt;filehandle); }
  return false;
}</t>
<t tx="caminhante.20210224224017.1">public function readln () {
  if (!$this-&gt;filehandle) { return false; }
  if ($this-&gt;is_file()) { return fgets($this-&gt;filehandle); }
  if ($this-&gt;is_directory()) { return readdir($this-&gt;filehandle); }
  return false;
}</t>
<t tx="caminhante.20210224224024.1">public function read_all () {
  if (!$this-&gt;filehandle) { return false; }
  $this-&gt;rewind();
  if ($this-&gt;is_file()) { return $this-&gt;read($this-&gt;length()); }
  if ($this-&gt;is_directory()) {
    $r = '';
    for ($i = 1; $i &lt;= $this-&gt;length(); $i++) { $r .= readdir($this-&gt;filehandle) . "\n"; }
    return $r; }
  return false;
}</t>
<t tx="caminhante.20210224224041.1">public function write ($str) {
  if (!$this-&gt;filehandle) { return false; }
  if ($this-&gt;is_file()) { return fwrite($this-&gt;filehandle, $str); }
  return false;
}</t>
<t tx="caminhante.20210224224047.1">public function write_all ($lines) {
  if (!$this-&gt;filehandle) { return false; }
  if ($this-&gt;is_file()) { 
    ftruncate($this-&gt;filehandle, 0);
    rewind($this-&gt;filehandle);
    foreach ($lines as $line) {
      $r = $this-&gt;write($line);
      if ($r != count($line)) { return false; }}
    return true; }
  return false;
}</t>
<t tx="caminhante.20210224224052.1">public function flush () {
  if (!$this-&gt;filehandle) { return false; }
  if ($this-&gt;is_file()) { return fflush($this-&gt;filehandle); }
  return false;
}</t>
<t tx="caminhante.20210224224102.1">public function list ($pattern = '*') {
  $dir = $this-&gt;parent();
  if ($this-&gt;is_directory() &amp;&amp; $this-&gt;exists()) {
    $dir = $this-&gt;name(); }
  return glob($dir . File::separator() . $pattern, GLOB_MARK &amp; GLOB_NOSORT &amp; GLOB_BRACE);
}</t>
<t tx="caminhante.20210224224109.1">public function mkdir ($name = false) {
  if (!$name &amp;&amp; !$this-&gt;exists()) {
    return mkdir($this-&gt;filename, 0777, true);
  } else {
    return false; }
  $dir = $this-&gt;parent();
  if ($this-&gt;is_directory() &amp;&amp; $this-&gt;exists()) {
    $dir = $this-&gt;name(); }
  return mkdir($dir . File::separator() . $name, 0777, true);
}</t>
<t tx="caminhante.20210224224118.1">public function mkfile ($name) {
  $dir = $this-&gt;parent();
  if ($this-&gt;is_directory() &amp;&amp; $this-&gt;exists()) {
    $dir = $this-&gt;name(); }
  return touch($dir . File::separator() . $name);
}</t>
<t tx="caminhante.20210224224124.1">public function lock_exclusive () {
  if ($this-&gt;is_directory()) { return false; }
  if (!$this-&gt;filehandle) { $this-&gt;open_rw(); }
  return ($this-&gt;filehandle &amp;&amp;
    flock($this-&gt;filehandle, LOCK_EX|LOCK_NB, $eWouldBlock) == true &amp;&amp;
    $eWouldBlock == 0);
}</t>
<t tx="caminhante.20210224224133.1">public function lock_shared () {
  if ($this-&gt;is_directory()) { return false; }
  if (!$this-&gt;filehandle) { $this-&gt;open_rw(); }
  return ($this-&gt;filehandle &amp;&amp;
    flock($this-&gt;filehandle, LOCK_SH|LOCK_NB, $eWouldBlock) &amp;&amp;
    $eWouldBlock == 0);
}</t>
<t tx="caminhante.20210224224140.1">public function unlock () {
  if ($this-&gt;filehandle) { return $this-&gt;close(); }
  return false;
}</t>
<t tx="caminhante.20210224224153.1"></t>
<t tx="caminhante.20210224224415.1"></t>
<t tx="caminhante.20210224224450.1"></t>
</tnodes>
</leo_file>
